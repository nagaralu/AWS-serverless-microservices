service:
  name: auction

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  #variables can be defined as below
  stage: ${opt:stage, 'dev'}
  region: us-east-2
  environment: ## the environment labels are used in js files
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
  # permission to write to DynamoDB Tables, also can be assigned at lambda functions
  iamRoleStatements:
    - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}

# creating DynamoDB Tables
resources:
  Resources:
    # a new resource to create - an YAML object
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          # POST method to create an auction - AWS will make necessary changes to Lambda
          method: POST
          path: /auction #note '/' is optional

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          # GET method to get all auctions - new lambda function for get method - returns array of auctions
          method: GET
          path: /auctions

  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          # GET method to get an auction by id - note the syntax for id path parameter to be available inside the lambda function
          method: GET
          path: /auction/{id}

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          # PATCH method to place a bid - new lambda function
          # POST is to create a resource, placing a bid is not resource, its a property of auction
          method: PATCH
          path: /auction/{id}/bid

custom:
  AuctionsTable:
    #DynamoDB return values, Ref returns the DynamoDB table name and GetAtt returns ARN of the table
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
